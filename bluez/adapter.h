/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p adapter.h:adapter.cpp org.bluez.adapter.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ADAPTER_H_1290186361
#define ADAPTER_H_1290186361

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.bluez.Adapter
 */
class OrgBluezAdapterInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.bluez.Adapter"; }

public:
    OrgBluezAdapterInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgBluezAdapterInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> CancelDeviceCreation(const QString &address)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(address);
        return asyncCallWithArgumentList(QLatin1String("CancelDeviceCreation"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreateDevice(const QString &address)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(address);
        return asyncCallWithArgumentList(QLatin1String("CreateDevice"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> CreatePairedDevice(const QString &address, const QDBusObjectPath &agent, const QString &capability)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(address) << qVariantFromValue(agent) << qVariantFromValue(capability);
        return asyncCallWithArgumentList(QLatin1String("CreatePairedDevice"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath> FindDevice(const QString &address)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(address);
        return asyncCallWithArgumentList(QLatin1String("FindDevice"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> GetProperties()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetProperties"), argumentList);
    }

    inline Q_DECL_DEPRECATED QDBusPendingReply<QList<QDBusObjectPath> > ListDevices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ListDevices"), argumentList);
    }

    inline QDBusPendingReply<> RegisterAgent(const QDBusObjectPath &agent, const QString &capability)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(agent) << qVariantFromValue(capability);
        return asyncCallWithArgumentList(QLatin1String("RegisterAgent"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseSession()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ReleaseSession"), argumentList);
    }

    inline QDBusPendingReply<> RemoveDevice(const QDBusObjectPath &device)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(device);
        return asyncCallWithArgumentList(QLatin1String("RemoveDevice"), argumentList);
    }

    inline QDBusPendingReply<> RequestSession()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RequestSession"), argumentList);
    }

    inline QDBusPendingReply<> SetProperty(const QString &name, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(value);
        return asyncCallWithArgumentList(QLatin1String("SetProperty"), argumentList);
    }

    inline QDBusPendingReply<> StartDiscovery()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("StartDiscovery"), argumentList);
    }

    inline QDBusPendingReply<> StopDiscovery()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("StopDiscovery"), argumentList);
    }

    inline QDBusPendingReply<> UnregisterAgent(const QDBusObjectPath &agent)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(agent);
        return asyncCallWithArgumentList(QLatin1String("UnregisterAgent"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DeviceCreated(const QDBusObjectPath &device);
    void DeviceDisappeared(const QString &address);
    void DeviceFound(const QString &address, const QVariantMap &values);
    void DeviceRemoved(const QDBusObjectPath &device);
    void PropertyChanged(const QString &name, const QDBusVariant &value);
};

namespace org {
  namespace bluez {
    typedef ::OrgBluezAdapterInterface Adapter;
  }
}
#endif
